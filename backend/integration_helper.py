"""
Integration Helper for Cover Letter Generator
This module provides utilities to help integrate the Python backend with the Next.js frontend
"""

import os
import json
import logging
from pathlib import Path
from typing import Dict, Any, List, Union

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("integration_helper")

class IntegrationHelper:
    """
    Helper class for integrating Python backend with Next.js frontend
    """
    
    def __init__(self, project_root: str = None):
        """
        Initialize the integration helper
        
        Args:
            project_root: Path to the project root directory
        """
        if project_root:
            self.project_root = Path(project_root)
        else:
            # Try to determine project root
            self.project_root = Path(__file__).parent.parent
        
        self.backend_dir = self.project_root / "backend"
        self.frontend_dir = self.project_root
        
        # Ensure directories exist
        if not self.backend_dir.exists():
            logger.warning(f"Backend directory not found at {self.backend_dir}")
        
        if not self.frontend_dir.exists():
            logger.warning(f"Frontend directory not found at {self.frontend_dir}")
    
    def generate_api_types(self):
        """
        Generate TypeScript interface definitions for the API
        """
        # Define the TypeScript interfaces based on our Python types
        typescript_interfaces = """
/**
 * Auto-generated TypeScript interfaces for Cover Letter Generator API
 * Generated by integration_helper.py
 */

export interface ResumeInfo {
  name: string;
  email: string;
  phone: string;
  address: string;
  skills: string[];
  education: string;
  experience: string;
  workHistory: string[];
  summary: string;
}

export interface JobInfo {
  companyName: string;
  jobTitle: string;
  jobDescription: string;
}

export interface JobAnalysis {
  requirements: string[];
  matchedSkills: string[];
  keyResponsibilities: string[];
  companyInsights: string;
}

export interface GenerateCoverLetterRequest {
  resumeText: string;
  jobInfo: JobInfo;
  specialInstructions?: string;
  templateStyle?: 'professional' | 'modern' | 'creative' | 'traditional';
}

export interface GenerateCoverLetterResponse {
  coverLetter: string;
  resumeInfo: ResumeInfo;
  jobAnalysis: JobAnalysis;
}

export interface ExtractResumeInfoRequest {
  resumeText: string;
}

export interface ExtractResumeInfoResponse extends ResumeInfo {}

export interface AnalyzeJobRequest {
  resumeInfo: ResumeInfo;
  jobDescription: string;
}

export interface AnalyzeJobResponse extends JobAnalysis {}

export interface ApiErrorResponse {
  error: string;
}
"""
        
        # Write to file
        output_file = self.frontend_dir / "lib" / "api-types.ts"
        
        # Ensure the directory exists
        output_file.parent.mkdir(exist_ok=True, parents=True)
        
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(typescript_interfaces)
        
        logger.info(f"Generated TypeScript interfaces at {output_file}")
    
    def generate_api_client(self):
        """
        Generate a TypeScript API client for the frontend
        """
        # Define the TypeScript API client
        typescript_client = """
/**
 * Auto-generated TypeScript API client for Cover Letter Generator API
 * Generated by integration_helper.py
 */

import { 
  ResumeInfo,
  JobInfo,
  JobAnalysis,
  GenerateCoverLetterRequest,
  GenerateCoverLetterResponse,
  ExtractResumeInfoRequest,
  ExtractResumeInfoResponse,
  AnalyzeJobRequest,
  AnalyzeJobResponse,
  ApiErrorResponse
} from './api-types';

/**
 * API base URL - change this to point to your backend
 */
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000';

/**
 * Cover Letter Generator API client
 */
export class CoverLetterApi {
  private baseUrl: string;

  constructor(baseUrl: string = API_BASE_URL) {
    this.baseUrl = baseUrl;
  }

  /**
   * Make an API request
   */
  private async request<T>(
    endpoint: string, 
    method: 'GET' | 'POST' = 'GET', 
    body?: any
  ): Promise<T> {
    const url = `${this.baseUrl}${endpoint}`;
    
    const options: RequestInit = {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: body ? JSON.stringify(body) : undefined,
    };

    try {
      const response = await fetch(url, options);
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || `API error: ${response.status}`);
      }
      
      return data as T;
    } catch (error) {
      console.error(`API request failed:`, error);
      throw error;
    }
  }

  /**
   * Check if the API is running
   */
  async healthCheck(): Promise<{ status: string; message: string }> {
    return this.request('/api/health');
  }

  /**
   * Generate a cover letter
   */
  async generateCoverLetter(
    request: GenerateCoverLetterRequest
  ): Promise<GenerateCoverLetterResponse> {
    return this.request<GenerateCoverLetterResponse>(
      '/api/generate-cover-letter', 
      'POST', 
      request
    );
  }

  /**
   * Extract information from a resume
   */
  async extractResumeInfo(
    request: ExtractResumeInfoRequest
  ): Promise<ExtractResumeInfoResponse> {
    return this.request<ExtractResumeInfoResponse>(
      '/api/extract-resume-info', 
      'POST', 
      request
    );
  }

  /**
   * Analyze a job description
   */
  async analyzeJob(
    request: AnalyzeJobRequest
  ): Promise<AnalyzeJobResponse> {
    return this.request<AnalyzeJobResponse>(
      '/api/analyze-job', 
      'POST', 
      request
    );
  }
}

// Default export - singleton instance
const api = new CoverLetterApi();
export default api;
"""
        
        # Write to file
        output_file = self.frontend_dir / "lib" / "api-client.ts"
        
        # Ensure the directory exists
        output_file.parent.mkdir(exist_ok=True, parents=True)
        
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(typescript_client)
        
        logger.info(f"Generated TypeScript API client at {output_file}")
    
    def generate_frontend_env_file(self, api_url: str = "http://localhost:5000"):
        """
        Generate a .env.local file for the frontend
        
        Args:
            api_url: URL of the API server
        """
        env_content = f"""# Environment variables for Cover Letter Generator
# Generated by integration_helper.py

# API URL
NEXT_PUBLIC_API_URL={api_url}

# This tells the frontend to use the Python backend for ML processing
NEXT_PUBLIC_USE_ML_BACKEND=true

# Other environment variables
NEXT_PUBLIC_APP_ENV=development
"""
        
        # Write to file
        output_file = self.frontend_dir / ".env.local"
        
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(env_content)
        
        logger.info(f"Generated .env.local file at {output_file}")
    
    def generate_backend_env_file(self, port: int = 5000, debug: bool = True):
        """
        Generate a .env file for the backend
        
        Args:
            port: Port to run the API server on
            debug: Whether to enable debug mode
        """
        env_content = f"""# Environment variables for Cover Letter Generator Backend
# Generated by integration_helper.py

# Server configuration
PORT={port}
DEBUG={str(debug).lower()}

# Model configuration
USE_GPU=false
MODELS_DIR=./models
"""
        
        # Write to file
        output_file = self.backend_dir / ".env"
        
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(env_content)
        
        logger.info(f"Generated .env file at {output_file}")
    
    def setup_integration(self, api_url: str = "http://localhost:5000"):
        """
        Setup the complete integration between backend and frontend
        
        Args:
            api_url: URL of the API server
        """
        self.generate_api_types()
        self.generate_api_client()
        self.generate_frontend_env_file(api_url)
        self.generate_backend_env_file()
        
        logger.info("Integration setup complete!")

def main():
    """Main function"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Integration Helper for Cover Letter Generator')
    parser.add_argument('--project-root', help='Path to the project root directory')
    parser.add_argument('--api-url', default='http://localhost:5000', help='URL of the API server')
    
    args = parser.parse_args()
    
    helper = IntegrationHelper(args.project_root)
    helper.setup_integration(args.api_url)

if __name__ == "__main__":
    main() 